{
  "address": "0xAA047204b882A04D8e0C2A17b7E21A236B6637A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETHGateway",
          "name": "_WETH_GATEWAY",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "_AAVE_POOL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_ATokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeeds",
          "type": "address[]"
        },
        {
          "internalType": "contract IGAAVEBadge",
          "name": "_GAAVEBadge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "CampaignProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "ClaimBadge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE_ETH_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AAVE_POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAAVEBadge",
      "outputs": [
        {
          "internalType": "contract IGAAVEBadge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_GATEWAY",
      "outputs": [
        {
          "internalType": "contract IWETHGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aTokenAddresses",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badgeIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "campaignId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "campaignOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_claimant",
          "type": "address"
        }
      ],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "eligibleBadges",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "claimBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "claimableETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "claimableToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_campaignOwner",
          "type": "address"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCampaignCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supporter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getSupporterBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_supporter",
          "type": "address"
        }
      ],
      "name": "getSupporterETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenToPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolImplementationLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_cids",
          "type": "string[]"
        }
      ],
      "name": "proposeCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeEntered",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "powerAccumulated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac696604d4c88cea854af136f301c6e9370282bf851b87e4753af4160b00c0f3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xAA047204b882A04D8e0C2A17b7E21A236B6637A6",
    "transactionIndex": 0,
    "gasUsed": "3801505",
    "logsBloom": "0x
    "blockHash": "0x6839deb4e0fbde88f2ab69d288b5c94350b770adafd2a12fb3959d25dad8ee2b",
    "transactionHash": "0xac696604d4c88cea854af136f301c6e9370282bf851b87e4753af4160b00c0f3",
    "logs": [],
    "blockNumber": 27574658,
    "cumulativeGasUsed": "3801505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a58E9bbb5434FdA7FF78051a4B82cb0EF669C17",
    "0x6C9fB0D5bD9429eb9Cd96B85B81d872281771E6B",
    "0xb685400156cF3CBE8725958DeAA61436727A30c3",
    [
      "0x9A753f0F7886C9fbF63cF59D0D4423C5eFaCE95B",
      "0xb685400156cF3CBE8725958DeAA61436727A30c3"
    ],
    [
      "0x9A753f0F7886C9fbF63cF59D0D4423C5eFaCE95B",
      "0xb685400156cF3CBE8725958DeAA61436727A30c3"
    ],
    [
      "0x0FCAa9c899EC5A91eBc3D5Dd869De833b06fB046",
      "0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada"
    ],
    "0xA5d6a057A3Ce4e09Ab3707B0599Fc44120ED6B2B"
  ],
  "numDeployments": 1,
  "solcInputHash": "662dcb2dc25e714d53f92e982ebcfb94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETHGateway\",\"name\":\"_WETH_GATEWAY\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"_AAVE_POOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_ATokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"},{\"internalType\":\"contract IGAAVEBadge\",\"name\":\"_GAAVEBadge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"CampaignProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ClaimBadge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_ETH_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAAVEBadge\",\"outputs\":[{\"internalType\":\"contract IGAAVEBadge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_GATEWAY\",\"outputs\":[{\"internalType\":\"contract IWETHGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aTokenAddresses\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgeIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"campaignOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"eligibleBadges\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"claimBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"claimableETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignOwner\",\"type\":\"address\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getSupporterBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_supporter\",\"type\":\"address\"}],\"name\":\"getSupporterETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenToPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolImplementationLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_cids\",\"type\":\"string[]\"}],\"name\":\"proposeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEntered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"powerAccumulated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to deposit\",\"_campaignId\":\"The id of the specific campaign\",\"_tokenAddress\":\"The address of the pool\"}},\"depositETH(uint256)\":{\"params\":{\"_campaignId\":\"the id of the specific campaign\"}},\"getLatestPrice(address)\":{\"returns\":{\"_0\":\"The value of the token in USD\"}},\"withdraw(uint256,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to withdraw\",\"_campaignId\":\"The id of the specific campaign\",\"_tokenAddress\":\"The address of the token to withdraw\"}},\"withdrawETH(uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to withdraw\",\"_campaignId\":\"Pool Id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canClaim(uint256,address)\":{\"notice\":\"Check if the claimant is eligible for badge id\"},\"claimBadge(uint256)\":{\"notice\":\"Claim badges from GAAVE\"},\"deposit(uint256,address,uint256)\":{\"notice\":\"Deposit Crypto into a GAAVEPool\"},\"depositETH(uint256)\":{\"notice\":\"Deposit ETH into GAAVE.\"},\"getLatestPrice(address)\":{\"notice\":\"Calculate the value of deposit based on the token's address\"},\"withdraw(uint256,address,uint256)\":{\"notice\":\"Withdraw Crypto from GAAVE\"},\"withdrawETH(uint256,uint256)\":{\"notice\":\"Withdraw ETH from GAAVE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GAAVECore.sol\":\"GAAVECore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/GAAVECore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./interface/IGAAVECore.sol\\\";\\r\\nimport \\\"./interface/IWETHGateway.sol\\\";\\r\\nimport \\\"./interface/IGAAVEBadge.sol\\\";\\r\\nimport \\\"./interface/IPool.sol\\\";\\r\\n\\r\\n// import IERC20 from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport \\\"./GAAVEPool.sol\\\";\\r\\n\\r\\ncontract GAAVECore is IGAAVECore {\\r\\n    // Maps campaignId to GAAVEPool\\r\\n    mapping(uint256 => GAAVEPool) private campaigns;\\r\\n\\r\\n    // Maps\\r\\n    mapping(address => uint256) public campaignOwner;\\r\\n\\r\\n    // pool address to user address to user info\\r\\n    mapping(address => mapping(address => User)) public userInfo;\\r\\n\\r\\n    // Maps token address to Chainlink Price Feed\\r\\n    mapping(address => address) public tokenToPriceFeed;\\r\\n\\r\\n    // To deposit ETH/MATIC\\r\\n    IWETHGateway public WETH_GATEWAY;\\r\\n\\r\\n    // To deposit token assets (USDT, DAI, USDC, AAVE, etc)\\r\\n    IPool public AAVE_POOL;\\r\\n\\r\\n    // Address for WETH\\r\\n    address public WETH;\\r\\n    address public AAVE_ETH_POOL = 0x6C9fB0D5bD9429eb9Cd96B85B81d872281771E6B;\\r\\n\\r\\n    // Address for lib\\r\\n    address public poolImplementationLib;\\r\\n\\r\\n    // Address for ERC1155\\r\\n    IGAAVEBadge public GAAVEBadge;\\r\\n\\r\\n    // Address for tokens (DAI, MATIC)\\r\\n    IERC20[] public tokenAddresses;\\r\\n\\r\\n    // Address for ATokens (aDAI, aMATIC)\\r\\n    IERC20[] public aTokenAddresses;\\r\\n\\r\\n    uint256 public campaignId = 0;\\r\\n\\r\\n    uint256 public badgeIdCounter = 0;\\r\\n\\r\\n    constructor(\\r\\n        IWETHGateway _WETH_GATEWAY,\\r\\n        IPool _AAVE_POOL,\\r\\n        address _WETH,\\r\\n        IERC20[] memory _tokenAddresses,\\r\\n        IERC20[] memory _ATokenAddresses,\\r\\n        address[] memory _priceFeeds,\\r\\n        IGAAVEBadge _GAAVEBadge\\r\\n    ) {\\r\\n        require(\\r\\n            _tokenAddresses.length == _priceFeeds.length,\\r\\n            \\\"GAAVECore: number of token addresses must match price feeds\\\"\\r\\n        );\\r\\n        WETH_GATEWAY = _WETH_GATEWAY;\\r\\n        WETH = _WETH;\\r\\n        AAVE_POOL = _AAVE_POOL;\\r\\n        GAAVEBadge = _GAAVEBadge;\\r\\n        tokenAddresses = _tokenAddresses;\\r\\n        aTokenAddresses = _ATokenAddresses;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenAddresses.length; i++) {\\r\\n            tokenToPriceFeed[address(_tokenAddresses[i])] = _priceFeeds[i];\\r\\n        }\\r\\n\\r\\n        // Create 1 Implementation, so that save gas on future clones\\r\\n        GAAVEPool poolImplementation = new GAAVEPool();\\r\\n\\r\\n        uint256[] memory _badgeIds = new uint256[](2);\\r\\n        _badgeIds[0] = 0;\\r\\n        _badgeIds[1] = 1;\\r\\n\\r\\n        poolImplementation.init(\\r\\n            address(this),\\r\\n            msg.sender,\\r\\n            address(GAAVEBadge),\\r\\n            _badgeIds\\r\\n        );\\r\\n        poolImplementationLib = address(poolImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit Crypto into a GAAVEPool\\r\\n     * @param _campaignId The id of the specific campaign\\r\\n     * @param _tokenAddress The address of the pool\\r\\n     * @param _amount The amount of tokens to deposit\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _campaignId,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        // Get GAAVEPool from campaigns using _poolAddress\\r\\n        GAAVEPool _poolAddress = campaigns[_campaignId];\\r\\n        // Call Deposit Function of GAAVEPool\\r\\n\\r\\n        _poolAddress.deposit(_tokenAddress, _amount, msg.sender);\\r\\n\\r\\n        // Emit Event\\r\\n        emit Deposited(msg.sender, _tokenAddress, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw Crypto from GAAVE\\r\\n     * @param _campaignId The id of the specific campaign\\r\\n     * @param _tokenAddress The address of the token to withdraw\\r\\n     * @param _amount The amount of tokens to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 _campaignId,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        // Get GAAVEPool address\\r\\n        GAAVEPool _poolAddress = campaigns[_campaignId];\\r\\n\\r\\n        // Call Withdraw Function of GAAVEPool\\r\\n        _poolAddress.withdraw(_tokenAddress, _amount, msg.sender);\\r\\n\\r\\n        // emit event\\r\\n        emit Withdrawn(msg.sender, _tokenAddress, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit ETH into GAAVE.\\r\\n     * @param _campaignId the id of the specific campaign\\r\\n     */\\r\\n    function depositETH(uint256 _campaignId) external payable {\\r\\n        // Get GAAVEPool from campaigns using _poolAddress\\r\\n        GAAVEPool _poolAddress = campaigns[_campaignId];\\r\\n\\r\\n        // Call depositETH Function of GAAVEPool\\r\\n        _poolAddress.depositETH(msg.sender);\\r\\n\\r\\n        // emit event\\r\\n        emit DepositedETH(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw ETH from GAAVE\\r\\n     * @param _campaignId Pool Id\\r\\n     * @param _amount The amount of tokens to withdraw\\r\\n     */\\r\\n    function withdrawETH(uint256 _campaignId, uint256 _amount) external {\\r\\n        // Get GAAVEPool address\\r\\n        GAAVEPool _poolAddress = campaigns[_campaignId];\\r\\n\\r\\n        // Call Withdraw Function of GAAVEPool\\r\\n        _poolAddress.withdrawETH(_amount, msg.sender);\\r\\n\\r\\n        // emit event\\r\\n        emit Withdrawn(msg.sender, WETH, _amount);\\r\\n    }\\r\\n\\r\\n    function claimableETH(uint256 _campaignId) external view returns (uint256) {\\r\\n        GAAVEPool pool = campaigns[_campaignId];\\r\\n        return pool.claimableETH();\\r\\n    }\\r\\n\\r\\n    function claimableToken(uint256 _campaignId, address _tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        GAAVEPool pool = campaigns[_campaignId];\\r\\n        return pool.claimableToken(IERC20(_tokenAddress));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim badges from GAAVE\\r\\n     */\\r\\n    function claimBadge(uint256 _campaignId) external {\\r\\n        // Get token ids eligible for claim\\r\\n        uint256[] memory _eligibleBadges = campaigns[_campaignId].canClaim(\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // Loop through eligible badges\\r\\n        for (uint256 i = 0; i < _eligibleBadges.length; i++) {\\r\\n            if (GAAVEBadge.balanceOf(msg.sender, _eligibleBadges[i]) == 0) {\\r\\n                // Mint Badges for each eligible token id\\r\\n                GAAVEBadge.mint(msg.sender, _eligibleBadges[i], 1, \\\"\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if the claimant is eligible for badge id\\r\\n     */\\r\\n    function canClaim(uint256 _campaignId, address _claimant)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory eligibleBadges)\\r\\n    {\\r\\n        campaigns[_campaignId].canClaim(_claimant);\\r\\n    }\\r\\n\\r\\n    function getSupporterBalance(uint256 _campaignId, address _supporter, address _tokenAddress) external view returns (uint256){\\r\\n\\r\\n        GAAVEPool pool = campaigns[_campaignId];\\r\\n        uint256 result = pool.getSupporterTokenBalance(_supporter,_tokenAddress);\\r\\n        return result;\\r\\n\\r\\n    }\\r\\n\\r\\n        function getSupporterETHBalance(uint256 _campaignId,address _supporter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n         GAAVEPool pool = campaigns[_campaignId];\\r\\n        uint256 result = pool.getSupporterETHBalance(_supporter);\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the value of deposit based on the token's address\\r\\n     * @return The value of the token in USD\\r\\n     */\\r\\n\\r\\n    function getLatestPrice(address _priceFeed) public view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeed);\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/\\r\\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    function getTokenToPriceFeed(address token)\\r\\n        public\\r\\n        view\\r\\n        returns (address priceFeed)\\r\\n    {\\r\\n        priceFeed = tokenToPriceFeed[token];\\r\\n    }\\r\\n\\r\\n    function proposeCampaign(\\r\\n        uint256[] memory _thresholds,\\r\\n        string[] memory _cids\\r\\n    ) external override {}\\r\\n\\r\\n    function getCampaignCount() external view override returns (uint256) {}\\r\\n\\r\\n    function deployPool(address _campaignOwner) external returns (address) {\\r\\n        require(\\r\\n            campaignOwner[_campaignOwner] == 0,\\r\\n            \\\"GAAVECore: Owner already has an ongoing campaign!\\\"\\r\\n        );\\r\\n        GAAVEPool pool = GAAVEPool(Clones.clone(poolImplementationLib));\\r\\n\\r\\n        uint256[] memory _badgeIds = new uint256[](2);\\r\\n        _badgeIds[0] = badgeIdCounter;\\r\\n        _badgeIds[1] = badgeIdCounter + 1;\\r\\n\\r\\n        pool.init(\\r\\n            address(this),\\r\\n            _campaignOwner,\\r\\n            address(GAAVEBadge),\\r\\n            _badgeIds\\r\\n        );\\r\\n        badgeIdCounter += 2;\\r\\n        campaignId += 1;\\r\\n        campaignOwner[_campaignOwner] = campaignId;\\r\\n        campaigns[campaignId] = pool;\\r\\n\\r\\n        return address(pool);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(uint256 index) public view returns (IERC20) {\\r\\n        return tokenAddresses[index];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xafabf1a5c7bffd125d6fb9227f07dfca86961746d186d8c81567101fd8e2d6c7\",\"license\":\"MIT\"},\"contracts/GAAVEPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./GAAVECore.sol\\\";\\r\\n// Import openzeppelin IERC1155\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\n/// @notice Contract Logic for GAAVE Pool\\r\\n/// @dev This contract is used to manage the GAAVE Pools which is spawned everytime a beneficiary creates a campaign\\r\\ncontract GAAVEPool {\\r\\n    address public poolOwner; // The Beneficiary of the pool\\r\\n    GAAVECore public CORE;\\r\\n\\r\\n    IERC1155 public badge;\\r\\n    // supporter => User\\r\\n    mapping(address => User) public supporters;\\r\\n    // total staked amount\\r\\n    uint256 internal totalStake;\\r\\n\\r\\n    struct Campaign {\\r\\n        uint256[] badgeIds;\\r\\n        uint256[] thresholds;\\r\\n    }\\r\\n\\r\\n    Campaign internal campaign;\\r\\n\\r\\n    /**\\r\\n     * @notice Check if the claimant is eligible for badge id\\r\\n     */\\r\\n    function canClaim(address _claimant)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory eligibleBadges)\\r\\n    {\\r\\n        Campaign storage _campaign = campaign;\\r\\n\\r\\n        for (uint256 i = 0; i < _campaign.badgeIds.length; i++) {\\r\\n            if (\\r\\n                supporters[_claimant].powerAccumulated >=\\r\\n                _campaign.thresholds[i]\\r\\n            ) {\\r\\n                eligibleBadges[i] = _campaign.badgeIds[i];\\r\\n            }\\r\\n        }\\r\\n        return eligibleBadges;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        mapping(address => uint256) tokenAmount;\\r\\n        mapping(address => uint256) lastPrice;\\r\\n        uint256 ethAmount;\\r\\n        uint256 timeEntered;\\r\\n        uint256 powerAccumulated;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) public totalTokenAmount;\\r\\n    uint256 public totalEthAmount;\\r\\n\\r\\n    modifier onlyCore() {\\r\\n        require(msg.sender == address(CORE), \\\"GAAVEPool: Only GAAVECore!\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function init(\\r\\n        address _CORE,\\r\\n        address _poolOwner,\\r\\n        address _badge,\\r\\n        uint256[] calldata _badgeIds\\r\\n    ) public {\\r\\n        require(poolOwner == address(0), \\\"GAAVEPool: Already initialized\\\");\\r\\n\\r\\n        CORE = GAAVECore(_CORE);\\r\\n        poolOwner = _poolOwner;\\r\\n\\r\\n        uint256[] memory threshold = new uint256[](2);\\r\\n        threshold[0] = 10 ether;\\r\\n        threshold[1] = 100 ether;\\r\\n        campaign = Campaign(_badgeIds, threshold);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit token into pool\\r\\n     * @param _tokenAddress Token Address\\r\\n     * @param _amount Amount of tokens to deposit\\r\\n     * @param _supporter Address of the supporter\\r\\n     */\\r\\n    function deposit(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        address _supporter\\r\\n    ) public payable onlyCore returns (uint256) {\\r\\n        // Get User from storage\\r\\n        User storage user = supporters[_supporter];\\r\\n\\r\\n        // Get timestamp\\r\\n        uint256 timestamp = block.timestamp;\\r\\n\\r\\n        // Get current price of token\\r\\n        uint256 currentPrice = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(_tokenAddress)\\r\\n        );\\r\\n\\r\\n        // Deposit token into AAVE\\r\\n        CORE.AAVE_POOL().deposit(_tokenAddress, _amount, address(this), 0);\\r\\n\\r\\n        // if this is user's first time depositing this token, set powerAccumulated to 0,\\r\\n        // log amount and timestamp\\r\\n        if (user.tokenAmount[_tokenAddress] == 0) {\\r\\n            user.powerAccumulated = 0;\\r\\n            user.tokenAmount[_tokenAddress] = uint256(msg.value);\\r\\n            user.lastPrice[CORE.WETH()] = currentPrice;\\r\\n            user.timeEntered = timestamp;\\r\\n        } else {\\r\\n            // else, retrieve already accumulated power and reset timestamp to current timestamp\\r\\n            // Power = currentAmount * (prevPrice + currentPrice) / 2 * (currentTimestamp - startTimestamp)\\r\\n            user.powerAccumulated +=\\r\\n                ((user.tokenAmount[_tokenAddress] *\\r\\n                    (currentPrice + user.lastPrice[_tokenAddress])) / 2) *\\r\\n                (timestamp - user.timeEntered);\\r\\n            user.tokenAmount[_tokenAddress] += msg.value; // Update Token Deposited\\r\\n            user.timeEntered = timestamp; // Update Time Entered\\r\\n            user.lastPrice[CORE.WETH()] = currentPrice; // Update Last Entry Price of current token\\r\\n        }\\r\\n\\r\\n        // Update total staked amount\\r\\n        totalTokenAmount[_tokenAddress] += _amount;\\r\\n\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw token from pool\\r\\n     * @param _tokenAddress Token Address\\r\\n     * @param _amount Amount of tokens to deposit\\r\\n     * @param _supporter Address of the supporter\\r\\n     */\\r\\n    function withdraw(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount,\\r\\n        address _supporter\\r\\n    ) public onlyCore returns (uint256) {\\r\\n        User storage user = supporters[_supporter];\\r\\n        require(\\r\\n            user.tokenAmount[_tokenAddress] > _amount,\\r\\n            \\\"GAAVECore: Withdraw amount more than existing amount\\\"\\r\\n        );\\r\\n        uint256 currentPrice = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(_tokenAddress)\\r\\n        );\\r\\n        // withdraw from AAVE\\r\\n        CORE.AAVE_POOL().withdraw(_tokenAddress, _amount, msg.sender);\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        user.powerAccumulated +=\\r\\n            ((user.tokenAmount[_tokenAddress] *\\r\\n                (currentPrice + user.lastPrice[_tokenAddress])) / 2) *\\r\\n            (timestamp - user.timeEntered);\\r\\n        user.tokenAmount[_tokenAddress] -= _amount; // Update Token Deposited\\r\\n        user.timeEntered = timestamp;\\r\\n        // emit event\\r\\n\\r\\n        // Update total staked amount\\r\\n        totalTokenAmount[_tokenAddress] -= _amount;\\r\\n\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    // Stakes the sent ether, registering the caller as a supporter.\\r\\n    function depositETH(address supporter)\\r\\n        public\\r\\n        payable\\r\\n        onlyCore\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 amount = msg.value;\\r\\n\\r\\n        User storage user = supporters[supporter];\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        uint256 currentPrice = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(CORE.WETH())\\r\\n        );\\r\\n\\r\\n        CORE.WETH_GATEWAY().depositETH{value: amount}(\\r\\n            CORE.AAVE_ETH_POOL(),\\r\\n            address(this),\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // if this is user's first time depositing this token, set powerAccumulated to 0,\\r\\n        // log amount and timestamp\\r\\n        if (user.ethAmount == 0) {\\r\\n            user.powerAccumulated = 0;\\r\\n            user.ethAmount = uint256(msg.value);\\r\\n            user.lastPrice[CORE.WETH()] = currentPrice;\\r\\n            user.timeEntered = timestamp;\\r\\n        } else {\\r\\n            // else, retrieve already accumulated power and reset timestamp to current timestamp\\r\\n            // Power = currentAmount * (prevPrice + currentPrice) / 2 * (currentTimestamp - startTimestamp)\\r\\n            user.powerAccumulated +=\\r\\n                ((user.ethAmount *\\r\\n                    (currentPrice + user.lastPrice[CORE.WETH()])) / 2) *\\r\\n                (timestamp - user.timeEntered);\\r\\n            user.ethAmount += msg.value; // Update Token Deposited\\r\\n            user.timeEntered = timestamp; // Update Time Entered\\r\\n            user.lastPrice[CORE.WETH()] = currentPrice; // Update Last Entry Price of current token\\r\\n        }\\r\\n\\r\\n        // Update total staked amount\\r\\n        totalEthAmount += amount;\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    // Unstakes all previously staked ether by the calling supporter.\\r\\n    // The poolOwner keeps all generated yield.\\r\\n    function withdrawETH(uint256 _amount, address supporter)\\r\\n        public\\r\\n        onlyCore\\r\\n        returns (uint256)\\r\\n    {\\r\\n        User storage user = supporters[supporter];\\r\\n        require(\\r\\n            _amount < user.ethAmount,\\r\\n            \\\"GAAVECore: Withdraw amount more than existing amount\\\"\\r\\n        );\\r\\n        uint256 currentPrice = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(CORE.WETH())\\r\\n        );\\r\\n        // withdraw from AAVE\\r\\n        CORE.WETH_GATEWAY().withdrawETH(CORE.WETH(), _amount, msg.sender);\\r\\n        uint256 timestamp = block.timestamp;\\r\\n        user.powerAccumulated +=\\r\\n            ((user.ethAmount * (currentPrice + user.lastPrice[CORE.WETH()])) /\\r\\n                2) *\\r\\n            (timestamp - user.timeEntered);\\r\\n        user.ethAmount -= _amount; // Update Token Deposited\\r\\n        user.timeEntered = timestamp;\\r\\n\\r\\n        // Update total staked amount\\r\\n        totalEthAmount -= _amount;\\r\\n\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    // @notice claim sends the accrued interest to the poolOwner of this pool. The\\r\\n    // stake remains at the yield pool and continues generating yield.\\r\\n    function claimETH() public onlyCore returns (uint256) {\\r\\n        uint256 amount = claimableETH();\\r\\n        withdrawETH(amount, poolOwner);\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    // @notice claim sends the accrued interest to the poolOwner of this pool. The\\r\\n    // stake remains at the yield pool and continues generating yield.\\r\\n    function claim(address _tokenAddress) public onlyCore returns (uint256) {\\r\\n        uint256 amount = claimableToken(IERC20(_tokenAddress));\\r\\n        withdraw(address(CORE.getTokenAddress(0)), amount, poolOwner);\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    // claimableETH returns the total earned ether by the provided poolOwner.\\r\\n    // It is the accrued interest on all staked ether.\\r\\n    // It can be withdrawn by the poolOwner with claim.\\r\\n    function claimableETH() public view returns (uint256) {\\r\\n        IERC20 token = CORE.getTokenAddress(0);\\r\\n\\r\\n        return token.balanceOf(address(this)) - staked(address(token));\\r\\n    }\\r\\n\\r\\n    // claimableETH returns the total earned ether by the provided poolOwner.\\r\\n    // It is the accrued interest on all staked ether.\\r\\n    // It can be withdrawn by the poolOwner with claim.\\r\\n    function claimableToken(IERC20 token) public view returns (uint256) {\\r\\n        return token.balanceOf(address(this)) - staked(address(token));\\r\\n    }\\r\\n\\r\\n    function calculateYield() public view returns (uint256 value) {\\r\\n        // Calculate WETH tokens\\r\\n        uint256 amountETHYield = CORE.getTokenAddress(1).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // minus WETH deposited\\r\\n        amountETHYield -= stakedETH();\\r\\n        uint256 currentPriceETH = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(address(CORE.getTokenAddress(1)))\\r\\n        );\\r\\n\\r\\n        value = (amountETHYield * currentPriceETH) / 10**18;\\r\\n\\r\\n        // Calculate DAI in USD Value\\r\\n        uint256 amount = CORE.getTokenAddress(0).balanceOf(address(this));\\r\\n        amount -= staked(address(CORE.getTokenAddress(0)));\\r\\n        uint256 currentPrice = CORE.getLatestPrice(\\r\\n            CORE.getTokenToPriceFeed(address(CORE.getTokenAddress(0)))\\r\\n        );\\r\\n\\r\\n        value += (amount * currentPrice) / 10**18;\\r\\n    }\\r\\n\\r\\n    // staked returns the total staked ether by this poolOwner pool.\\r\\n    function stakedETH() public view returns (uint256) {\\r\\n        return totalEthAmount;\\r\\n    }\\r\\n\\r\\n    // Amount of tokens staked on the contract\\r\\n    function staked(address tokenAddress) public view returns (uint256) {\\r\\n        return totalTokenAmount[tokenAddress];\\r\\n    }\\r\\n\\r\\n    function getSupporterTokenBalance(address _supporter, address _tokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return supporters[_supporter].tokenAmount[_tokenAddress];\\r\\n    }\\r\\n\\r\\n    function getSupporterETHBalance(address _supporter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return supporters[_supporter].ethAmount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf75ac17116ec1d60841f81296c9b5c0f3e7dbd5721224cf34d08adfdb7e4a930\",\"license\":\"MIT\"},\"contracts/interface/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct ReserveData {\\r\\n        //stores the reserve configuration\\r\\n        ReserveConfigurationMap configuration;\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        //the current stable borrow rate. Expressed in ray\\r\\n        uint128 currentStableBorrowRate;\\r\\n        //timestamp of last update\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        //the id of the reserve. Represents the position in the list of the active reserves\\r\\n        uint16 id;\\r\\n        //aToken address\\r\\n        address aTokenAddress;\\r\\n        //stableDebtToken address\\r\\n        address stableDebtTokenAddress;\\r\\n        //variableDebtToken address\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n        //the current treasury balance, scaled\\r\\n        uint128 accruedToTreasury;\\r\\n        //the outstanding unbacked aTokens minted through the bridging feature\\r\\n        uint128 unbacked;\\r\\n        //the outstanding debt borrowed against this asset in isolation mode\\r\\n        uint128 isolationModeTotalDebt;\\r\\n    }\\r\\n\\r\\n    struct ReserveConfigurationMap {\\r\\n        //bit 0-15: LTV\\r\\n        //bit 16-31: Liq. threshold\\r\\n        //bit 32-47: Liq. bonus\\r\\n        //bit 48-55: Decimals\\r\\n        //bit 56: reserve is active\\r\\n        //bit 57: reserve is frozen\\r\\n        //bit 58: borrowing is enabled\\r\\n        //bit 59: stable rate borrowing enabled\\r\\n        //bit 60: asset is paused\\r\\n        //bit 61: borrowing in isolation mode is enabled\\r\\n        //bit 62-63: reserved\\r\\n        //bit 64-79: reserve factor\\r\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n        //bit 152-167 liquidation protocol fee\\r\\n        //bit 168-175 eMode category\\r\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n        //bit 252-255 unused\\r\\n\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct UserConfigurationMap {\\r\\n        /**\\r\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n         * asset is borrowed by the user.\\r\\n         */\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct EModeCategory {\\r\\n        // each eMode category has a custom ltv and liquidation threshold\\r\\n        uint16 ltv;\\r\\n        uint16 liquidationThreshold;\\r\\n        uint16 liquidationBonus;\\r\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n        address priceSource;\\r\\n        string label;\\r\\n    }\\r\\n\\r\\n    enum InterestRateMode {\\r\\n        NONE,\\r\\n        STABLE,\\r\\n        VARIABLE\\r\\n    }\\r\\n\\r\\n    struct ReserveCache {\\r\\n        uint256 currScaledVariableDebt;\\r\\n        uint256 nextScaledVariableDebt;\\r\\n        uint256 currPrincipalStableDebt;\\r\\n        uint256 currAvgStableBorrowRate;\\r\\n        uint256 currTotalStableDebt;\\r\\n        uint256 nextAvgStableBorrowRate;\\r\\n        uint256 nextTotalStableDebt;\\r\\n        uint256 currLiquidityIndex;\\r\\n        uint256 nextLiquidityIndex;\\r\\n        uint256 currVariableBorrowIndex;\\r\\n        uint256 nextVariableBorrowIndex;\\r\\n        uint256 currLiquidityRate;\\r\\n        uint256 currVariableBorrowRate;\\r\\n        uint256 reserveFactor;\\r\\n        ReserveConfigurationMap reserveConfiguration;\\r\\n        address aTokenAddress;\\r\\n        address stableDebtTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        uint40 reserveLastUpdateTimestamp;\\r\\n        uint40 stableDebtLastUpdateTimestamp;\\r\\n    }\\r\\n\\r\\n    struct ExecuteLiquidationCallParams {\\r\\n        uint256 reservesCount;\\r\\n        uint256 debtToCover;\\r\\n        address collateralAsset;\\r\\n        address debtAsset;\\r\\n        address user;\\r\\n        bool receiveAToken;\\r\\n        address priceOracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct ExecuteSupplyParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        address onBehalfOf;\\r\\n        uint16 referralCode;\\r\\n    }\\r\\n\\r\\n    struct ExecuteBorrowParams {\\r\\n        address asset;\\r\\n        address user;\\r\\n        address onBehalfOf;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        uint16 referralCode;\\r\\n        bool releaseUnderlying;\\r\\n        uint256 maxStableRateBorrowSizePercent;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct ExecuteRepayParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        address onBehalfOf;\\r\\n        bool useATokens;\\r\\n    }\\r\\n\\r\\n    struct ExecuteWithdrawParams {\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        address to;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct ExecuteSetUserEModeParams {\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 categoryId;\\r\\n    }\\r\\n\\r\\n    struct FinalizeTransferParams {\\r\\n        address asset;\\r\\n        address from;\\r\\n        address to;\\r\\n        uint256 amount;\\r\\n        uint256 balanceFromBefore;\\r\\n        uint256 balanceToBefore;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 fromEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct FlashloanParams {\\r\\n        address receiverAddress;\\r\\n        address[] assets;\\r\\n        uint256[] amounts;\\r\\n        uint256[] interestRateModes;\\r\\n        address onBehalfOf;\\r\\n        bytes params;\\r\\n        uint16 referralCode;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        uint256 flashLoanPremiumTotal;\\r\\n        uint256 maxStableRateBorrowSizePercent;\\r\\n        uint256 reservesCount;\\r\\n        address addressesProvider;\\r\\n        uint8 userEModeCategory;\\r\\n        bool isAuthorizedFlashBorrower;\\r\\n    }\\r\\n\\r\\n    struct FlashloanSimpleParams {\\r\\n        address receiverAddress;\\r\\n        address asset;\\r\\n        uint256 amount;\\r\\n        bytes params;\\r\\n        uint16 referralCode;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        uint256 flashLoanPremiumTotal;\\r\\n    }\\r\\n\\r\\n    struct FlashLoanRepaymentParams {\\r\\n        uint256 amount;\\r\\n        uint256 totalPremium;\\r\\n        uint256 flashLoanPremiumToProtocol;\\r\\n        address asset;\\r\\n        address receiverAddress;\\r\\n        uint16 referralCode;\\r\\n    }\\r\\n\\r\\n    struct CalculateUserAccountDataParams {\\r\\n        UserConfigurationMap userConfig;\\r\\n        uint256 reservesCount;\\r\\n        address user;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n    }\\r\\n\\r\\n    struct ValidateBorrowParams {\\r\\n        ReserveCache reserveCache;\\r\\n        UserConfigurationMap userConfig;\\r\\n        address asset;\\r\\n        address userAddress;\\r\\n        uint256 amount;\\r\\n        InterestRateMode interestRateMode;\\r\\n        uint256 maxStableLoanPercent;\\r\\n        uint256 reservesCount;\\r\\n        address oracle;\\r\\n        uint8 userEModeCategory;\\r\\n        address priceOracleSentinel;\\r\\n        bool isolationModeActive;\\r\\n        address isolationModeCollateralAddress;\\r\\n        uint256 isolationModeDebtCeiling;\\r\\n    }\\r\\n\\r\\n    struct ValidateLiquidationCallParams {\\r\\n        ReserveCache debtReserveCache;\\r\\n        uint256 totalDebt;\\r\\n        uint256 healthFactor;\\r\\n        address priceOracleSentinel;\\r\\n    }\\r\\n\\r\\n    struct CalculateInterestRatesParams {\\r\\n        uint256 unbacked;\\r\\n        uint256 liquidityAdded;\\r\\n        uint256 liquidityTaken;\\r\\n        uint256 totalStableDebt;\\r\\n        uint256 totalVariableDebt;\\r\\n        uint256 averageStableBorrowRate;\\r\\n        uint256 reserveFactor;\\r\\n        address reserve;\\r\\n        address aToken;\\r\\n    }\\r\\n\\r\\n    struct InitReserveParams {\\r\\n        address asset;\\r\\n        address aTokenAddress;\\r\\n        address stableDebtAddress;\\r\\n        address variableDebtAddress;\\r\\n        address interestRateStrategyAddress;\\r\\n        uint16 reservesCount;\\r\\n        uint16 maxNumberReserves;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x284c378e44b2c75b5bb9aec663db538417def88a591a7fa91cb09a3d577d78e1\",\"license\":\"BUSL-1.1\"},\"contracts/interface/IGAAVEBadge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n// import erc1155 interface\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface IGAAVEBadge is IERC1155 {\\r\\n    function mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    ) external;\\r\\n\\r\\n    function airdrop(address[] memory _addresses, uint256 _id) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x09143935e23c65b939b449ee1ca3ee69803bee4e546322d80701040b6b816b15\",\"license\":\"MIT\"},\"contracts/interface/IGAAVECore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IGAAVECore {\\r\\n    struct Campaign {\\r\\n        uint256[] badgeIds;\\r\\n        uint256[] thresholds;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        mapping(address => uint256) tokenAmount;\\r\\n        mapping(address => uint256) lastPrice;\\r\\n        uint256 ethAmount;\\r\\n        uint256 timeEntered;\\r\\n        uint256 powerAccumulated;\\r\\n    }\\r\\n\\r\\n    event Deposited(\\r\\n        address indexed _user,\\r\\n        address indexed _tokenAddress,\\r\\n        uint256 indexed _amount\\r\\n    );\\r\\n    event Withdrawn(\\r\\n        address indexed _user,\\r\\n        address indexed _tokenAddress,\\r\\n        uint256 indexed _amount\\r\\n    );\\r\\n    event DepositedETH(address indexed _user, uint256 indexed _amount);\\r\\n    event WithdrawnETH(address indexed _user, uint256 indexed _amount);\\r\\n    event ClaimBadge(\\r\\n        address indexed _user,\\r\\n        uint256 indexed _id,\\r\\n        address _address\\r\\n    );\\r\\n    event CampaignProposed(\\r\\n        address _campaignAddress,\\r\\n        uint256 _campaignId,\\r\\n        uint256[] _thresholds\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit Crypto into GAAVE\\r\\n     * @param _tokenAddress The address of the token to deposit\\r\\n     * @param _amount The amount of tokens to deposit\\r\\n     */\\r\\n    function deposit(\\r\\n        uint256 _campaignId,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw Crypto from GAAVE\\r\\n     * @param _tokenAddress The address of the token to withdraw\\r\\n     * @param _amount The amount of tokens to withdraw\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 _poolAddress,\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit ETH into GAAVE\\r\\n     */\\r\\n    function depositETH(uint256 _campaignId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw ETH from GAAVE\\r\\n     * @param _amount The amount of tokens to withdraw\\r\\n     */\\r\\n    function withdrawETH(uint256 _campaignId, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Claim badges from GAAVE\\r\\n     * @param _campaignId The id of the campaign to claim from\\r\\n     */\\r\\n    function claimBadge(uint256 _campaignId) external;\\r\\n\\r\\n    function proposeCampaign(\\r\\n        uint256[] memory _thresholds,\\r\\n        string[] memory _cids\\r\\n    ) external;\\r\\n\\r\\n    function getCampaignCount() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xcb030d580e59caa47dbef1a4b9980ab24c54bef297866b6a7adb3657e9c68d15\",\"license\":\"MIT\"},\"contracts/interface/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for an Aave Pool.\\r\\n **/\\r\\ninterface IPool {\\r\\n    /**\\r\\n     * @dev Emitted on mintUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n     * @param amount The amount of supplied assets\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event MintUnbacked(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on backUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param backer The address paying for the backing\\r\\n     * @param amount The amount added as backing\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    event BackUnbacked(\\r\\n        address indexed reserve,\\r\\n        address indexed backer,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on supply()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n     * @param amount The amount supplied\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Supply(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlying asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to The address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n     **/\\r\\n    event Repay(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed repayer,\\r\\n        uint256 amount,\\r\\n        bool useATokens\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    event SwapBorrowRateMode(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        DataTypes.InterestRateMode interestRateMode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param totalDebt The total isolation mode debt for the reserve\\r\\n     */\\r\\n    event IsolationModeTotalDebtUpdated(\\r\\n        address indexed asset,\\r\\n        uint256 totalDebt\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the user selects a certain asset category for eMode\\r\\n     * @param user The address of the user\\r\\n     * @param categoryId The category id\\r\\n     **/\\r\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 premium,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated.\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The next liquidity rate\\r\\n     * @param stableBorrowRate The next stable borrow rate\\r\\n     * @param variableBorrowRate The next variable borrow rate\\r\\n     * @param liquidityIndex The next liquidity index\\r\\n     * @param variableBorrowIndex The next variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n     * @param reserve The address of the reserve\\r\\n     * @param amountMinted The amount minted to the treasury\\r\\n     **/\\r\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n     * @param asset The address of the underlying asset to mint\\r\\n     * @param amount The amount to mint\\r\\n     * @param onBehalfOf The address that will receive the aTokens\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function mintUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n     * @param asset The address of the underlying asset to back\\r\\n     * @param amount The amount to back\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    function backUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function supply(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     **/\\r\\n    function supplyWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n     * equivalent debt tokens\\r\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n     * balance is not enough to cover the whole debt\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithATokens(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n     * @param asset The address of the underlying asset supplied\\r\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts of the assets being flash-borrowed\\r\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata interestRateModes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n     * @param asset The address of the asset being flash-borrowed\\r\\n     * @param amount The amount of the asset being flash-borrowed\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoanSimple(\\r\\n        address receiverAddress,\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n     * @return ltv The loan to value of The user\\r\\n     * @return healthFactor The current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralBase,\\r\\n            uint256 totalDebtBase,\\r\\n            uint256 availableBorrowsBase,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n     * interest rate strategy\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function initReserve(\\r\\n        address asset,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Drop a reserve\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     **/\\r\\n    function dropReserve(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the interest rate strategy contract\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function setReserveInterestRateStrategyAddress(\\r\\n        address asset,\\r\\n        address rateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param configuration The new configuration bitmap\\r\\n     **/\\r\\n    function setConfiguration(\\r\\n        address asset,\\r\\n        DataTypes.ReserveConfigurationMap calldata configuration\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state and configuration data of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Validates and finalizes an aToken transfer\\r\\n     * @dev Only callable by the overlying aToken of the `asset`\\r\\n     * @param asset The address of the underlying asset of the aToken\\r\\n     * @param from The user from which the aTokens are transferred\\r\\n     * @param to The user receiving the aTokens\\r\\n     * @param amount The amount being transferred/withdrawn\\r\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n     */\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromBefore,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n     * @dev It does not include dropped reserves\\r\\n     * @return The addresses of the underlying assets of the initialized reserves\\r\\n     **/\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n     * @return The address of the reserve associated with id\\r\\n     **/\\r\\n    function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n     * @return The address of the PoolAddressesProvider\\r\\n     **/\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the protocol fee on the bridging\\r\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n     */\\r\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n     * - A part is collected by the protocol treasury\\r\\n     * @dev The total premium is calculated on the total borrowed amount\\r\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n     */\\r\\n    function updateFlashloanPremiums(\\r\\n        uint128 flashLoanPremiumTotal,\\r\\n        uint128 flashLoanPremiumToProtocol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Configures a new category for the eMode.\\r\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n     * The category 0 is reserved as it's the default for volatile assets\\r\\n     * @param id The id of the category\\r\\n     * @param config The configuration of the category\\r\\n     */\\r\\n    function configureEModeCategory(\\r\\n        uint8 id,\\r\\n        DataTypes.EModeCategory memory config\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the data of an eMode category\\r\\n     * @param id The id of the category\\r\\n     * @return The configuration data of the category\\r\\n     */\\r\\n    function getEModeCategoryData(uint8 id)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to use the protocol in eMode\\r\\n     * @param categoryId The id of the category\\r\\n     */\\r\\n    function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the eMode the user is using\\r\\n     * @param user The address of the user\\r\\n     * @return The eMode id\\r\\n     */\\r\\n    function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n     * @dev It requires the given asset has zero debt ceiling\\r\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n     */\\r\\n    function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n     */\\r\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total fee on flash loans\\r\\n     * @return The total fee on flashloans\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the bridge fees sent to protocol\\r\\n     * @return The bridge fee sent to the protocol treasury\\r\\n     */\\r\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the flashloan fees sent to protocol\\r\\n     * @return The flashloan fee sent to the protocol treasury\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n     * @return The maximum number of reserves supported\\r\\n     */\\r\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n     * @param assets The list of reserves for which the minting needs to be executed\\r\\n     **/\\r\\n    function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue and transfer tokens locked in this contract\\r\\n     * @param token The address of the token\\r\\n     * @param to The address of the recipient\\r\\n     * @param amount The amount of token to transfer\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @dev Deprecated: Use the `supply` function instead\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x796aacd49a10e3aae85dba9d9145b218a7afd5c070cd0a9bd932ccc64207f846\",\"license\":\"AGPL-3.0\"},\"contracts/interface/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aave\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n **/\\r\\ninterface IPoolAddressesProvider {\\r\\n    /**\\r\\n     * @dev Emitted when the market identifier is updated.\\r\\n     * @param oldMarketId The old id of the market\\r\\n     * @param newMarketId The new id of the market\\r\\n     */\\r\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool is updated.\\r\\n     * @param oldAddress The old address of the Pool\\r\\n     * @param newAddress The new address of the Pool\\r\\n     */\\r\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool configurator is updated.\\r\\n     * @param oldAddress The old address of the PoolConfigurator\\r\\n     * @param newAddress The new address of the PoolConfigurator\\r\\n     */\\r\\n    event PoolConfiguratorUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle is updated.\\r\\n     * @param oldAddress The old address of the PriceOracle\\r\\n     * @param newAddress The new address of the PriceOracle\\r\\n     */\\r\\n    event PriceOracleUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL manager is updated.\\r\\n     * @param oldAddress The old address of the ACLManager\\r\\n     * @param newAddress The new address of the ACLManager\\r\\n     */\\r\\n    event ACLManagerUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL admin is updated.\\r\\n     * @param oldAddress The old address of the ACLAdmin\\r\\n     * @param newAddress The new address of the ACLAdmin\\r\\n     */\\r\\n    event ACLAdminUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle sentinel is updated.\\r\\n     * @param oldAddress The old address of the PriceOracleSentinel\\r\\n     * @param newAddress The new address of the PriceOracleSentinel\\r\\n     */\\r\\n    event PriceOracleSentinelUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool data provider is updated.\\r\\n     * @param oldAddress The old address of the PoolDataProvider\\r\\n     * @param newAddress The new address of the PoolDataProvider\\r\\n     */\\r\\n    event PoolDataProviderUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new proxy is created.\\r\\n     * @param id The identifier of the proxy\\r\\n     * @param proxyAddress The address of the created proxy contract\\r\\n     * @param implementationAddress The address of the implementation contract\\r\\n     */\\r\\n    event ProxyCreated(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address indexed implementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new non-proxied contract address is registered.\\r\\n     * @param id The identifier of the contract\\r\\n     * @param oldAddress The address of the old contract\\r\\n     * @param newAddress The address of the new contract\\r\\n     */\\r\\n    event AddressSet(\\r\\n        bytes32 indexed id,\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n     * @param id The identifier of the contract\\r\\n     * @param proxyAddress The address of the proxy contract\\r\\n     * @param oldImplementationAddress The address of the old implementation contract\\r\\n     * @param newImplementationAddress The address of the new implementation contract\\r\\n     */\\r\\n    event AddressSetAsProxy(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address oldImplementationAddress,\\r\\n        address indexed newImplementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the id of the Aave market to which this contract points to.\\r\\n     * @return The market id\\r\\n     **/\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n     * identify and validate multiple Aave markets.\\r\\n     * @param newMarketId The market id\\r\\n     */\\r\\n    function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an address by its identifier.\\r\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n     * @dev It returns ZERO if there is no registered address with the given id\\r\\n     * @param id The id\\r\\n     * @return The address of the registered for the specified id\\r\\n     */\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice General function to update the implementation of a proxy registered with\\r\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n     * set as implementation the `newImplementationAddress`.\\r\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n     * setter function, in order to avoid unexpected consequences\\r\\n     * @param id The id\\r\\n     * @param newImplementationAddress The address of the new implementation\\r\\n     */\\r\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n     * @param id The id\\r\\n     * @param newAddress The address to set\\r\\n     */\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Pool proxy.\\r\\n     * @return The Pool proxy address\\r\\n     **/\\r\\n    function getPool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n     * setting the new `pool` implementation when the function is called for the first time.\\r\\n     * @param newPoolImpl The new Pool implementation\\r\\n     **/\\r\\n    function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the PoolConfigurator proxy.\\r\\n     * @return The PoolConfigurator proxy address\\r\\n     **/\\r\\n    function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n     **/\\r\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle.\\r\\n     * @return The address of the PriceOracle\\r\\n     */\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle.\\r\\n     * @param newPriceOracle The address of the new PriceOracle\\r\\n     */\\r\\n    function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL manager.\\r\\n     * @return The address of the ACLManager\\r\\n     */\\r\\n    function getACLManager() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL manager.\\r\\n     * @param newAclManager The address of the new ACLManager\\r\\n     **/\\r\\n    function setACLManager(address newAclManager) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL admin.\\r\\n     * @return The address of the ACL admin\\r\\n     */\\r\\n    function getACLAdmin() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL admin.\\r\\n     * @param newAclAdmin The address of the new ACL admin\\r\\n     */\\r\\n    function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle sentinel.\\r\\n     * @return The address of the PriceOracleSentinel\\r\\n     */\\r\\n    function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle sentinel.\\r\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n     **/\\r\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the data provider.\\r\\n     * @return The address of the DataProvider\\r\\n     */\\r\\n    function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the data provider.\\r\\n     * @param newDataProvider The address of the new DataProvider\\r\\n     **/\\r\\n    function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6cb01954a8fb874975bc5552ff83664fcca355f470db97434674a2f8443f27f\",\"license\":\"AGPL-3.0\"},\"contracts/interface/IWETHGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IWETHGateway {\\r\\n    function depositETH(\\r\\n        address lendingPool,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external payable;\\r\\n\\r\\n    function withdrawETH(\\r\\n        address lendingPool,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    function repayETH(\\r\\n        address lendingPool,\\r\\n        uint256 amount,\\r\\n        uint256 rateMode,\\r\\n        address onBehalfOf\\r\\n    ) external payable;\\r\\n\\r\\n    function borrowETH(\\r\\n        address lendingPool,\\r\\n        uint256 amount,\\r\\n        uint256 interesRateMode,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd75e4fca825b23a3f88db37f229fc02f34ce819c7d787983fed72ae0f7658af4\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80638078f22c116100f7578063bfe3630511610095578063e63697c811610064578063e63697c81461057d578063e79873be1461059d578063eabc59a4146105bd578063f8100bbb146105d357600080fd5b8063bfe36305146104fd578063c7cdea371461051d578063d2390bbf1461053d578063e5df8b841461055d57600080fd5b8063a67d5658116100d1578063a67d56581461047d578063ad5c46481461049d578063ae5a98ba146104bd578063bc157ac1146104dd57600080fd5b80638078f22c146103f85780638c856f9c1461042e5780638ed5b0fc1461046757600080fd5b80633b053e4b1161016457806367ccdf381161013e57806367ccdf38146103775780636caa92181461039757806378bef8a2146103ab5780637f00b8d3146103cb57600080fd5b80633b053e4b1461032457806346667bd3146103445780635358fbda1461036457600080fd5b806323415135116101a0578063234151351461029657806326923d80146102b857806329a13494146102d757806329a2e8e6146102f757600080fd5b806308a01675146101c75780630f208beb1461020457806316345f1814610268575b600080fd5b3480156101d357600080fd5b506005546101e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021057600080fd5b5061024d61021f366004611113565b6002602081815260009384526040808520909152918352912090810154600382015460049092015490919083565b604080519384526020840192909252908201526060016101fb565b34801561027457600080fd5b50610288610283366004611146565b6105f3565b6040519081526020016101fb565b3480156102a257600080fd5b506102b66102b1366004611161565b61066a565b005b3480156102c457600080fd5b506102b66102d33660046112ce565b5050565b3480156102e357600080fd5b506101e76102f2366004611146565b61085d565b34801561030357600080fd5b50610317610312366004611387565b610a4d565b6040516101fb91906113e5565b34801561033057600080fd5b5061028861033f3660046113f8565b610ad4565b34801561035057600080fd5b5061028861035f366004611161565b610b64565b6102b6610372366004611161565b610be1565b34801561038357600080fd5b506101e7610392366004611161565b610c90565b3480156103a357600080fd5b506000610288565b3480156103b757600080fd5b506101e76103c6366004611161565b610cc0565b3480156103d757600080fd5b506102886103e6366004611146565b60016020526000908152604090205481565b34801561040457600080fd5b506101e7610413366004611146565b6003602052600090815260409020546001600160a01b031681565b34801561043a57600080fd5b506101e7610449366004611146565b6001600160a01b039081166000908152600360205260409020541690565b34801561047357600080fd5b50610288600c5481565b34801561048957600080fd5b506009546101e7906001600160a01b031681565b3480156104a957600080fd5b506006546101e7906001600160a01b031681565b3480156104c957600080fd5b506004546101e7906001600160a01b031681565b3480156104e957600080fd5b506102b66104f8366004611434565b610cea565b34801561050957600080fd5b506008546101e7906001600160a01b031681565b34801561052957600080fd5b506102b6610538366004611469565b610db5565b34801561054957600080fd5b506007546101e7906001600160a01b031681565b34801561056957600080fd5b506101e7610578366004611161565b610e79565b34801561058957600080fd5b506102b6610598366004611434565b610e89565b3480156105a957600080fd5b506102886105b8366004611387565b610f54565b3480156105c957600080fd5b50610288600d5481565b3480156105df57600080fd5b506102886105ee366004611387565b610fd8565b6000808290506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d91906114a5565b5091979650505050505050565b60008181526020819052604080822054905163bf3506c160e01b81523360048201526001600160a01b039091169063bf3506c190602401600060405180830381865afa1580156106be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e691908101906114f5565b905060005b81518110156108585760095482516001600160a01b039091169062fdd58e90339085908590811061071e5761071e611586565b60200260200101516040518363ffffffff1660e01b81526004016107579291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610798919061159c565b6108465760095482516001600160a01b039091169063731133e99033908590859081106107c7576107c7611586565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260016044820152608060648201526000608482015260a401600060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050505b80610850816115cb565b9150506106eb565b505050565b6001600160a01b038116600090815260016020526040812054156108e25760405162461bcd60e51b815260206004820152603160248201527f4741415645436f72653a204f776e657220616c72656164792068617320616e206044820152706f6e676f696e672063616d706169676e2160781b60648201526084015b60405180910390fd5b6008546000906108fa906001600160a01b031661105f565b6040805160028082526060820183529293506000929091602083019080368337019050509050600d548160008151811061093657610936611586565b6020908102919091010152600d5461094f9060016115e6565b8160018151811061096257610962611586565b602090810291909101015260095460405163f41d0c7b60e01b81526001600160a01b038085169263f41d0c7b926109a49230928a9291169087906004016115fe565b600060405180830381600087803b1580156109be57600080fd5b505af11580156109d2573d6000803e3d6000fd5b505050506002600d60008282546109e991906115e6565b925050819055506001600c6000828254610a0391906115e6565b9091555050600c546001600160a01b0394851660009081526001602090815260408083208490559282528190522080546001600160a01b0319169483169490941790935592915050565b6000828152602081905260409081902054905163bf3506c160e01b81526001600160a01b038381166004830152606092169063bf3506c190602401600060405180830381865afa158015610aa5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610acd91908101906114f5565b5092915050565b60008381526020819052604080822054905163a423ea7d60e01b81526001600160a01b0385811660048301528481166024830152909116908290829063a423ea7d90604401602060405180830381865afa158015610b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5a919061159c565b9695505050505050565b600081815260208181526040808320548151630b4670bd60e21b815291516001600160a01b03909116928392632d19c2f492600480830193928290030181865afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda919061159c565b9392505050565b60008181526020819052604090819020549051631696d40360e11b81523360048201526001600160a01b03909116908190632d2da806906024016020604051808303816000875af1158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e919061159c565b50604051349033907f81ad7215cbec0a1d55a48f38b34525d2b677147ee7ceb872ac23ecca5ec966e590600090a35050565b6000600a8281548110610ca557610ca5611586565b6000918252602090912001546001600160a01b031692915050565b600b8181548110610cd057600080fd5b6000918252602090912001546001600160a01b0316905081565b60008381526020819052604090819020549051633d14d1b760e21b81526001600160a01b0384811660048301526024820184905233604483015290911690819063f45346dc906064016020604051808303816000875af1158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d76919061159c565b5060405182906001600160a01b0385169033907f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a790600090a450505050565b60008281526020819052604090819020549051631b08c5a960e11b8152600481018390523360248201526001600160a01b039091169081906336118b52906044016020604051808303816000875af1158015610e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e39919061159c565b5060065460405183916001600160a01b03169033907fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb90600090a4505050565b600a8181548110610cd057600080fd5b60008381526020819052604090819020549051631a4ca37b60e21b81526001600160a01b038481166004830152602482018490523360448301529091169081906369328dec906064016020604051808303816000875af1158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f15919061159c565b5060405182906001600160a01b0385169033907fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb90600090a450505050565b60008281526020819052604080822054905163e12e05a760e01b81526001600160a01b03848116600483015290911690819063e12e05a790602401602060405180830381865afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd0919061159c565b949350505050565b60008281526020819052604080822054905163715f669f60e11b81526001600160a01b038481166004830152909116908290829063e2becd3e90602401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611056919061159c565b95945050505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166110f75760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016108d9565b919050565b80356001600160a01b03811681146110f757600080fd5b6000806040838503121561112657600080fd5b61112f836110fc565b915061113d602084016110fc565b90509250929050565b60006020828403121561115857600080fd5b610bda826110fc565b60006020828403121561117357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111b9576111b961117a565b604052919050565b600067ffffffffffffffff8211156111db576111db61117a565b5060051b60200190565b6000601f83818401126111f757600080fd5b8235602061120c611207836111c1565b611190565b82815260059290921b8501810191818101908784111561122b57600080fd5b8287015b848110156112c257803567ffffffffffffffff808211156112505760008081fd5b818a0191508a603f8301126112655760008081fd5b8582013560408282111561127b5761127b61117a565b61128c828b01601f19168901611190565b92508183528c818386010111156112a35760008081fd5b818185018985013750600090820187015284525091830191830161122f565b50979650505050505050565b600080604083850312156112e157600080fd5b823567ffffffffffffffff808211156112f957600080fd5b818501915085601f83011261130d57600080fd5b8135602061131d611207836111c1565b82815260059290921b8401810191818101908984111561133c57600080fd5b948201945b8386101561135a57853582529482019490820190611341565b9650508601359250508082111561137057600080fd5b5061137d858286016111e5565b9150509250929050565b6000806040838503121561139a57600080fd5b8235915061113d602084016110fc565b600081518084526020808501945080840160005b838110156113da578151875295820195908201906001016113be565b509495945050505050565b602081526000610bda60208301846113aa565b60008060006060848603121561140d57600080fd5b8335925061141d602085016110fc565b915061142b604085016110fc565b90509250925092565b60008060006060848603121561144957600080fd5b83359250611459602085016110fc565b9150604084013590509250925092565b6000806040838503121561147c57600080fd5b50508035926020909101359150565b805169ffffffffffffffffffff811681146110f757600080fd5b600080600080600060a086880312156114bd57600080fd5b6114c68661148b565b94506020860151935060408601519250606086015191506114e96080870161148b565b90509295509295909350565b6000602080838503121561150857600080fd5b825167ffffffffffffffff81111561151f57600080fd5b8301601f8101851361153057600080fd5b805161153e611207826111c1565b81815260059190911b8201830190838101908783111561155d57600080fd5b928401925b8284101561157b57835182529284019290840190611562565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156115ae57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156115df576115df6115b5565b5060010190565b600082198211156115f9576115f96115b5565b500190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090610b5a908301846113aa56fea2646970667358221220245597376ff08f9222ee1c99c176554441c762572938b3a791c348f5e8fba8bc64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to deposit",
          "_campaignId": "The id of the specific campaign",
          "_tokenAddress": "The address of the pool"
        }
      },
      "depositETH(uint256)": {
        "params": {
          "_campaignId": "the id of the specific campaign"
        }
      },
      "getLatestPrice(address)": {
        "returns": {
          "_0": "The value of the token in USD"
        }
      },
      "withdraw(uint256,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to withdraw",
          "_campaignId": "The id of the specific campaign",
          "_tokenAddress": "The address of the token to withdraw"
        }
      },
      "withdrawETH(uint256,uint256)": {
        "params": {
          "_amount": "The amount of tokens to withdraw",
          "_campaignId": "Pool Id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canClaim(uint256,address)": {
        "notice": "Check if the claimant is eligible for badge id"
      },
      "claimBadge(uint256)": {
        "notice": "Claim badges from GAAVE"
      },
      "deposit(uint256,address,uint256)": {
        "notice": "Deposit Crypto into a GAAVEPool"
      },
      "depositETH(uint256)": {
        "notice": "Deposit ETH into GAAVE."
      },
      "getLatestPrice(address)": {
        "notice": "Calculate the value of deposit based on the token's address"
      },
      "withdraw(uint256,address,uint256)": {
        "notice": "Withdraw Crypto from GAAVE"
      },
      "withdrawETH(uint256,uint256)": {
        "notice": "Withdraw ETH from GAAVE"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2999,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "campaigns",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_contract(GAAVEPool)4603)"
      },
      {
        "astId": 3003,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "campaignOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3010,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "userInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(User)5004_storage))"
      },
      {
        "astId": 3014,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "tokenToPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3017,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "WETH_GATEWAY",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IWETHGateway)5993"
      },
      {
        "astId": 3020,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "AAVE_POOL",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPool)5741"
      },
      {
        "astId": 3022,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "WETH",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3025,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "AAVE_ETH_POOL",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3027,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "poolImplementationLib",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3030,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "GAAVEBadge",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IGAAVEBadge)4980"
      },
      {
        "astId": 3034,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_contract(IERC20)1825)dyn_storage"
      },
      {
        "astId": 3038,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "aTokenAddresses",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_contract(IERC20)1825)dyn_storage"
      },
      {
        "astId": 3041,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "campaignId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3044,
        "contract": "contracts/GAAVECore.sol:GAAVECore",
        "label": "badgeIdCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)1825)dyn_storage": {
        "base": "t_contract(IERC20)1825",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(GAAVEPool)4603": {
        "encoding": "inplace",
        "label": "contract GAAVEPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1825": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGAAVEBadge)4980": {
        "encoding": "inplace",
        "label": "contract IGAAVEBadge",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)5741": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IWETHGateway)5993": {
        "encoding": "inplace",
        "label": "contract IWETHGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(User)5004_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IGAAVECore.User))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(User)5004_storage)"
      },
      "t_mapping(t_address,t_struct(User)5004_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGAAVECore.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)5004_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(GAAVEPool)4603)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract GAAVEPool)",
        "numberOfBytes": "32",
        "value": "t_contract(GAAVEPool)4603"
      },
      "t_struct(User)5004_storage": {
        "encoding": "inplace",
        "label": "struct IGAAVECore.User",
        "members": [
          {
            "astId": 4993,
            "contract": "contracts/GAAVECore.sol:GAAVECore",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4997,
            "contract": "contracts/GAAVECore.sol:GAAVECore",
            "label": "lastPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4999,
            "contract": "contracts/GAAVECore.sol:GAAVECore",
            "label": "ethAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5001,
            "contract": "contracts/GAAVECore.sol:GAAVECore",
            "label": "timeEntered",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5003,
            "contract": "contracts/GAAVECore.sol:GAAVECore",
            "label": "powerAccumulated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}